{"version":3,"sources":["actions/index.ts","services/starnavi-api-service.ts","components/game-select/game-select.tsx","components/spinner/spinner.tsx","components/pages/main.tsx","components/app/app.tsx","components/error-indicator/error-indicator.tsx","components/error-boundry/error-boundry.tsx","reducers/index.ts","store.ts","index.tsx"],"names":["starNaviApiService","baseUrl","fetchData","URI","a","fetch","res","ok","Error","status","json","postData","data","method","headers","body","JSON","stringify","response","getGameSettings","getWinners","setWinner","query","fetchGameSettings","dispatch","type","then","payload","catch","err","console","log","winnersLoaded","winners","fetchWinners","setInterval","stopGame","winner","changeMode","idx","mode","GameSelect","props","activeName","preparedSettings","onChange","useState","open","setOpen","className","onClick","map","x","key","gameMode","delay","Spinner","connect","state","name","gameSettings","game","changeName","value","startGame","setRandomFieldTimeout","settings","fields","filter","length","randomIdx","Math","floor","random","setTimeout","selectSettings","sendWinner","d","Date","Intl","DateTimeFormat","year","month","day","formatToParts","date","getHours","getMinutes","useEffect","hasActive","findIndex","isGoing","active","Object","keys","values","gamesPlayed","newName","isLoading","e","currentTarget","placeholder","disabled","y","i","breakEl","field","Fragment","id","App","ErrorIndicator","ErrorBoundry","hasError","this","setState","children","Component","initialState","reducer","action","Array","from","newArr","reverse","slice","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1856187.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\nimport StarNaviApiService, { GameSettingsResponse, WinnersResponse, GameSettings, GameMode } from \"../services/starnavi-api-service\";\nimport { FieldMode } from \"../reducers\";\n\nconst starNaviApiService = new StarNaviApiService()\n\nexport const GAME_SETTINGS_REQUEST = 'GAME_SETTINGS_REQUEST'\nexport const GAME_SETTINGS_SUCCESS = 'GAME_SETTINGS_SUCCESS'\nexport const SELECT_SETTINGS = 'SELECT_SETTINGS'\nexport const WINNERS_REQUEST = 'WINNERS_REQUEST'\nexport const WINNERS_SUCCESS = 'WINNERS_SUCCESS'\nexport const CHANGE_NAME = 'CHANGE_NAME'\nexport const START_GAME = 'START_GAME'\nexport const STOP_GAME = 'STOP_GAME'\nexport const CHANGE_MODE = 'CHANGE_MODE'\n\ninterface GameSettingsRequest { \n  type: typeof GAME_SETTINGS_REQUEST \n}\n\ninterface GameSettingsLoaded {\n  type: typeof GAME_SETTINGS_SUCCESS\n  payload: GameSettingsResponse\n}\n\ninterface WinnersRequest { \n  type: typeof WINNERS_REQUEST \n}\n\ninterface WinnersLoaded {\n  type: typeof WINNERS_SUCCESS\n  payload: WinnersResponse\n}\n\ninterface ChangeName {\n  type: typeof CHANGE_NAME\n  payload: string\n}\n\ninterface StartGame {\n  type: typeof START_GAME\n}\n\ninterface StopGame {\n  type: typeof STOP_GAME,\n  payload: 'human' | 'comp'\n}\n\ninterface ChangeMode {\n  type: typeof CHANGE_MODE,\n  payload: { idx: number, mode: FieldMode }\n}\n\ninterface SelectSettings {\n  type: typeof SELECT_SETTINGS,\n  payload: GameMode\n}\n\nexport type ActionTypes = \n    GameSettingsRequest\n  | GameSettingsLoaded\n  | SelectSettings\n  | WinnersRequest\n  | WinnersLoaded\n  | ChangeName\n  | StartGame\n  | StopGame\n  | ChangeMode\n\nexport const selectSettings = (key: GameMode) => {\n  return {\n    type: SELECT_SETTINGS,\n    payload: key\n  }\n}\n\nconst gameSettingsRequest = (): GameSettingsRequest => {\n  return {\n    type: GAME_SETTINGS_REQUEST\n  }\n};\n\nconst gameSettingsLoaded = (gameSettings: GameSettingsResponse): GameSettingsLoaded => {\n  return {\n    type: GAME_SETTINGS_SUCCESS,\n    payload: gameSettings\n  };\n};\n\nexport const fetchGameSettings = (dispatch: Dispatch) => () => {\n  dispatch(gameSettingsRequest());\n  starNaviApiService.getGameSettings()\n    .then((data: GameSettingsResponse) => {\n      dispatch(gameSettingsLoaded(data))\n    })\n    .catch((err: any) => console.log(err));\n}\n\nconst winnersRequest = (): WinnersRequest => {\n  return {\n    type: WINNERS_REQUEST\n  }\n};\n\nconst winnersLoaded = (winners: WinnersResponse): WinnersLoaded => {\n  return {\n    type: WINNERS_SUCCESS,\n    payload: winners\n  };\n};\n\nexport const fetchWinners = (dispatch: Dispatch) => () => {\n  const fetch = () => {\n    dispatch(winnersRequest());\n    starNaviApiService.getWinners()\n      .then((data: WinnersResponse) => {\n        dispatch(winnersLoaded(data))\n      })\n      .catch((err: any) => console.log(err));\n  }\n  fetch()\n  setInterval(() => {\n    fetch()\n  }, 30*1000)\n  \n}\n\nexport const changeName = (name: string) => {\n  return {\n    type: CHANGE_NAME,\n    payload: name\n  }\n}\n\n// Game \n\nexport const startGame = () => {\n  return {\n    type: START_GAME\n  }\n}\n\nexport const stopGame = (winner: 'comp' | 'human') => {\n  return {\n    type: STOP_GAME,\n    payload: winner\n  }\n}\n\nexport const changeMode = (idx: number, mode: FieldMode) => {\n  return {\n    type: CHANGE_MODE,\n    payload: { idx, mode }\n  }\n}\n\nexport const setRandomFieldTimeout = (dispatch: Dispatch, settings: GameSettings, fields: FieldMode[]) => {\n\n  if (fields.filter((x) => x === 'comp').length > fields.length / 2 ) {\n    dispatch(stopGame('comp'))\n    return\n  }\n\n  if (fields.filter((x) => x === 'human').length > fields.length / 2 ) {\n    dispatch(stopGame('human'))\n    return\n  }\n\n  let randomIdx = Math.floor(Math.random() * fields.length)\n\n  while (fields[randomIdx] !== 'free') {\n    randomIdx = Math.floor(Math.random() * fields.length)\n  }\n\n  dispatch(changeMode(randomIdx, 'active'))\n\n  setTimeout(() => {\n    dispatch(changeMode(randomIdx, 'comp'))\n  }, settings.delay)\n}\n\nexport const sendWinner = (dispatch: Dispatch, winner: string) => {\n  const d = new Date()\n  const dateTimeFormat = new Intl.DateTimeFormat('en', { year: 'numeric', month: 'short', day: '2-digit' }) \n  const [{ value: month },,{ value: day },,{ value: year }] = dateTimeFormat.formatToParts(d) \n  dispatch(winnersRequest());\n  starNaviApiService\n    .setWinner({winner, date: `${d.getHours()}:${d.getMinutes()}; ${day} ${month} ${year}` })\n    .then((data: WinnersResponse) => {\n      dispatch(winnersLoaded(data))\n    })\n    .catch((err: any) => console.log(err));\n}","/* \n  https://starnavi-frontend-test-task.herokuapp.com/game-settings\n\n  Response: \n  {\n    \"easyMode\":{\"field\":5,\"delay\":2000},\n    \"normalMode\":{\"field\":10,\"delay\":1000},\n    \"hardMode\":{\"field\":15,\"delay\":900}\n  }\n*/\n\nexport interface GameSettings {\n  field: number,\n  delay: number\n}\n\nexport interface GameSettingsResponse {\n  easyMode: GameSettings,\n  normalMode: GameSettings,\n  hardMode: GameSettings\n}\n\nexport type GameMode = keyof GameSettingsResponse\n\n/* \n  https://starnavi-frontend-test-task.herokuapp.com/winners\n\n  Response:\n  [\n    {\"id\":0.45737727636626135,\"winner\":\"User\",\"date\":\"13:21; 17 May 2020\"},\n    {\"id\":0.15529652809719385,\"winner\":\"Computer\",\"date\":\"13:21; 17 May 2020\"}\n  ]\n*/\n\nexport interface Winner {\n  id: number,\n  winner: string,\n  date: string\n}\n\nexport type WinnersResponse = Winner[]\n\n/*\n  POST https://starnavi-frontend-test-task.herokuapp.com/winners\n\n  { winner: \"\", date: \"\"}\n*/\n\ninterface WinnerQuery {\n  winner: string,\n  date: string\n}\n\nexport default class StarNaviApiService {\n  baseUrl = 'https://starnavi-frontend-test-task.herokuapp.com/'\n\n  fetchData = async (URI: string) => {\n    const res = await fetch(`${this.baseUrl}${URI}`)\n    \n    if (!res.ok) {\n      throw new Error(`Could not fetch ${URI}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n\n  postData = async (URI: string, data = {}) => {\n    const response = await fetch(`${this.baseUrl}${URI}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return await response.json(); \n  }\n\n  getGameSettings = async () => {\n    return await this.fetchData('game-settings')\n  }\n\n  getWinners = async () => {\n    return await this.fetchData('winners')\n  }\n\n  setWinner = async (query: WinnerQuery) => {\n    return await this.postData('winners', query)\n  }\n\n}","import React, { useState } from 'react'\nimport { GameMode, GameSettings } from '../../services/test-starnavi-api-service'\n\nexport type PreparedElement = [\n  GameMode,\n  GameSettings\n]\n\ntype GameSelectProps = {\n  activeName: string\n  preparedSettings: Array<PreparedElement>\n  onChange: (gameMode: GameMode) => void\n}\n\nconst GameSelect = (props: GameSelectProps) => {\n  const { activeName, preparedSettings, onChange } = props\n  const [ open, setOpen ] = useState(false)\n\n  const handleSelect = (gameMode: GameMode) => {\n    onChange(gameMode)\n    setOpen(false)\n  }\n\n  return <div className={`game_select ${open ? 'open' : ''}`}>\n    <div className={'current'} onClick={() => setOpen(!open)}>{activeName ? activeName : 'Pick game mode'}</div>\n    <div className={'game_options'}>\n      {\n        preparedSettings.map((x: PreparedElement) => {\n          return <div key={x[0]} onClick={() => handleSelect(x[0])}>{x[1].delay} , {x[0]}</div>\n        })\n      }\n    </div>\n    \n  </div>\n}\n\nexport default GameSelect","import React from 'react'\nimport './spinner.css'\n\nconst Spinner = () => {\n  return <div className=\"loader\"></div>\n}\n\nexport default Spinner","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { State, FieldMode, WinnersState, GameSettingsState, GameState } from '../../reducers'\nimport { Dispatch } from 'redux'\nimport { fetchGameSettings, fetchWinners, changeName, startGame, changeMode, setRandomFieldTimeout, selectSettings, sendWinner } from '../../actions'\nimport './main.scss'\nimport { GameSettings, GameMode } from '../../services/test-starnavi-api-service'\nimport GameSelect, { PreparedElement } from '../game-select/game-select'\nimport Spinner from '../spinner/spinner'\nimport { Winner } from '../../services/starnavi-api-service'\n\ntype Props = {\n  name: string\n  winners: WinnersState\n  gameSettings: GameSettingsState\n  game: GameState\n  fetchGameSettings: () => void\n  fetchWinners: () => void\n  changeName: (v: string) => void\n  setRandomFieldTimeout: (settings: GameSettings, fields: FieldMode[]) => void\n  changeMode: (idx: number, m: FieldMode) => void\n  startGame: () => void\n  selectSettings: (k: GameMode) => void\n  sendWinner: (winner: string) => void\n}\n\nconst Main = (props: Props) => {\n  const { name, winners, gameSettings, game } = props\n  const { fetchGameSettings, fetchWinners, changeName, setRandomFieldTimeout, changeMode, startGame, selectSettings, sendWinner } = props\n\n  useEffect(() => {\n    fetchGameSettings()\n    fetchWinners()\n  }, [])\n\n  useEffect(() => {\n    const hasActive = game.fields.findIndex((x: FieldMode) => x === 'active') !== -1\n\n    if (game.isGoing && !hasActive) {\n      setRandomFieldTimeout(gameSettings.active, game.fields)\n    }\n  }, [game.fields])\n\n  const preparedSettings: PreparedElement[] = Object.keys(gameSettings.values).map((key) => { \n    return [key as GameMode, gameSettings.values[key as GameMode]]; \n  })\n\n\n  useEffect(() => {\n    if (game.gamesPlayed > 0) {\n      const newName = name || 'No Name'\n      const winner = game.winner === 'human' ? newName : 'Computer'\n      sendWinner(winner)\n    }\n  }, [game.gamesPlayed])\n\n  return <div className='game_wrapper'>\n    <div className='left_side'>\n      <div className='menu'>\n        {gameSettings.isLoading && <Spinner />}\n        <GameSelect \n          activeName={gameSettings.active.name} \n          preparedSettings={preparedSettings}\n          onChange={selectSettings}\n        />\n\n        <input value={name} onChange={(e) => changeName(e.currentTarget.value)} placeholder='Enter your name' />\n\n        <button \n          onClick={() => startGame()}\n          disabled={game.isGoing || !gameSettings.active.name}\n        >{game.gamesPlayed > 0 ? 'Play again' : 'Start Game'}</button>\n      </div>\n      \n      <div className='message'>\n        {game.winner === 'human' && `Winner: ${name ? name : 'No Name'}`}\n        {game.winner === 'comp' && `Winner: Computer`}\n      </div>\n\n      <div className={`game_fields`}>\n        {\n          game.fields.map((y: FieldMode, i: number) => {\n            let breakEl = null\n            if (i % gameSettings.active.field === 0) {\n              breakEl = <div className=\"break\"></div>\n            }\n            return <React.Fragment key={i}>\n              { breakEl }  \n              <div className={`field ${y}`} onClick={() => changeMode(i, 'human')}></div>  \n            </React.Fragment>\n          })\n        }\n      </div>\n    </div>\n\n    <div className='right_side'>\n      <div className='winner_wrapper'>\n        <div className='winner_head'>Leader Board</div>\n        <div className='winners'>\n          {winners.isLoading && <Spinner />}\n          {\n            winners.values.map((x: Winner) => {\n              return <div key={x.id}><span>{x.winner}</span> <span>{x.date}</span></div>\n            })\n          }\n        </div>\n      </div>\n    </div>\n  </div>\n}\n\nconst mapStateToProps = (state: State) => {\n  return {\n    name: state.name,\n    winners: state.winners,\n    gameSettings: state.gameSettings,\n    game: state.game\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    fetchGameSettings: fetchGameSettings(dispatch),\n    fetchWinners: fetchWinners(dispatch),\n    changeName: (value: string) => dispatch(changeName(value)),\n    changeMode: (idx: number, mode: FieldMode) => dispatch(changeMode(idx, mode)),\n    startGame: () => dispatch(startGame()),\n    setRandomFieldTimeout: (settings: GameSettings, fields: FieldMode[]) => setRandomFieldTimeout(dispatch, settings, fields),\n    selectSettings: (key: GameMode) => dispatch(selectSettings(key)),\n    sendWinner: (winner: string) => sendWinner(dispatch, winner)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React from 'react'\nimport Main from '../pages/main'\nimport './app.css';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react'\nimport './error-indicator.css'\n\nconst ErrorIndicator = () => {\n  return <div>Error!</div>;\n};\n\nexport default ErrorIndicator","import React, { Component } from 'react'\nimport ErrorIndicator from '../error-indicator/error-indicator'\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children\n  }\n}","import { ActionTypes, GAME_SETTINGS_REQUEST, GAME_SETTINGS_SUCCESS, WINNERS_REQUEST, WINNERS_SUCCESS, CHANGE_NAME, START_GAME, CHANGE_MODE, STOP_GAME, SELECT_SETTINGS,  } from \"../actions\";\nimport { WinnersResponse, GameSettingsResponse, GameSettings } from \"../services/test-starnavi-api-service\";\n\nexport type FieldMode = 'free' | 'active' | 'human' | 'comp'\n\nconst initialState = {\n  name: '',\n  winners: {\n    values: [] as WinnersResponse,\n    isLoading: false\n  },\n  gameSettings: {\n    values: {} as GameSettingsResponse,\n    active: {} as ActiveGameSettingsState,\n    isLoading: false\n  },\n  game: {\n    fields: [] as FieldMode[],\n    gamesPlayed: 0,\n    winner: '',\n    isGoing: false\n  }\n};\n\nexport type State = typeof initialState\nexport type WinnersState = typeof initialState.winners\nexport type GameSettingsState = typeof initialState.gameSettings\nexport type GameState = typeof initialState.game\nexport interface ActiveGameSettingsState extends GameSettings {\n  name: string\n}\n\nconst reducer = (state = initialState, action: ActionTypes) => {\n  console.log(action)\n  switch (action.type) {\n    case START_GAME: {\n      return {...state, game: {\n        ...state.game,\n        fields: Array.from(new Array(state.gameSettings.active.field ** 2),() => 'free' as FieldMode),\n        isGoing: true,\n        winner: ''\n      }}\n    }\n\n    case CHANGE_MODE: {\n      if (state.game.fields[action.payload.idx] !== 'active' && action.payload.mode !== 'active') {\n        return state\n      }\n\n      const newArr = [ ...state.game.fields ]\n      newArr[action.payload.idx] = action.payload.mode\n\n      return {...state, game: {\n        ...state.game,\n        fields: newArr\n      }}\n    }\n\n    case STOP_GAME: {\n      return {...state, game: {\n        ...state.game,\n        gamesPlayed: state.game.gamesPlayed + 1,\n        isGoing: false,\n        winner: action.payload\n      }}\n    }\n\n    case SELECT_SETTINGS: {\n      return {...state, gameSettings: {\n        ...state.gameSettings,\n        active: {...state.gameSettings.values[action.payload], name: action.payload}\n      },\n      game: {\n        ...state.game, \n        fields: [],\n        isGoing: false\n      }}\n    }\n    \n    case GAME_SETTINGS_REQUEST: {\n      return {...state, gameSettings: {\n          ...state.gameSettings,\n          isLoading: true\n        }\n      }\n    }\n\n    case GAME_SETTINGS_SUCCESS: {\n      return {...state, gameSettings: {\n          ...state.gameSettings,\n          values: action.payload,\n          isLoading: false\n        }\n      }\n    }\n\n    case WINNERS_REQUEST: {\n      return {...state, winners: {\n        ...state.winners,\n        isLoading: true\n      }}\n    }\n\n    case WINNERS_SUCCESS: {\n      return {...state, winners: {\n        ...state.winners,\n        values: action.payload.reverse().slice(0, 30),\n        isLoading: false\n      }}\n    }\n\n    case CHANGE_NAME: {\n      return {...state, name: action.payload}\n    }\n    \n    default:\n      return state\n  }\n};\n\nexport default reducer","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { Provider } from 'react-redux';\nimport ErrorBoundry from './components/error-boundry/error-boundry';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <App />\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}